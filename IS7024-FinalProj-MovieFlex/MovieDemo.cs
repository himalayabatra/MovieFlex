// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MovieJoin;
//
//    var movieDemo = MovieDemo.FromJson(jsonString);

namespace MovieJoin
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MovieDemo
    {
        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("copyright")]
        public string Copyright { get; set; }

        [JsonProperty("has_more")]
        public bool HasMore { get; set; }

        [JsonProperty("num_results")]
        public long NumResults { get; set; }

        [JsonProperty("results")]
        public List<Result> Results { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("display_title")]
        public string DisplayTitle { get; set; }

        [JsonProperty("mpaa_rating")]
        public string MpaaRating { get; set; }

        [JsonProperty("critics_pick")]
        public long CriticsPick { get; set; }

        [JsonProperty("byline")]
        public string Byline { get; set; }

        [JsonProperty("headline")]
        public string Headline { get; set; }

        [JsonProperty("summary_short")]
        public string SummaryShort { get; set; }

        [JsonProperty("publication_date")]
        public DateTimeOffset PublicationDate { get; set; }

        [JsonProperty("opening_date")]
        public DateTimeOffset? OpeningDate { get; set; }

        [JsonProperty("date_updated")]
        public DateTimeOffset DateUpdated { get; set; }

        [JsonProperty("link")]
        public Link Link { get; set; }

        [JsonProperty("multimedia")]
        public Multimedia Multimedia { get; set; }
    }

    public partial class Link
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("suggested_link_text")]
        public string SuggestedLinkText { get; set; }
    }

    public partial class Multimedia
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("src")]
        public Uri Src { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }
    }

    public enum TypeEnum { Article };

    public partial class MovieDemo
    {
        public static MovieDemo FromJson(string json) => JsonConvert.DeserializeObject<MovieDemo>(json, MovieJoin.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MovieDemo self) => JsonConvert.SerializeObject(self, MovieJoin.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "article")
            {
                return TypeEnum.Article;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Article)
            {
                serializer.Serialize(writer, "article");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
